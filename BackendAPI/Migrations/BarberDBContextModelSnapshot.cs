// <auto-generated />
using System;
using BackendAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(BarberDBContext))]
    partial class BarberDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BackendAPI.Models.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_Users_PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackendAPI.Models.Database.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("WorkerTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerTypeId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "andrija223@yahoo.com",
                            LastName = "Lazic",
                            Name = "andrija",
                            PasswordHash = new byte[] { 48, 120, 69, 50, 52, 53, 65, 50, 65, 69, 56, 55, 70, 70, 69, 48, 48, 50, 56, 54, 66, 57, 57, 66, 50, 49, 56, 66, 66, 51, 69, 67, 53, 67, 68, 56, 70, 48, 51, 52, 69, 57, 50, 48, 51, 67, 50, 56, 52, 56, 68, 48, 55, 68, 57, 55, 55, 50, 56, 70, 70, 50, 50, 53, 69, 69, 66, 69, 56, 57, 50, 67, 48, 69, 52, 55, 54, 54, 50, 55, 70, 67, 55, 52, 53, 55, 57, 69, 65, 57, 56, 53, 69, 50, 55, 48, 50, 55, 53, 54, 57, 67, 56, 70, 54, 67, 55, 65, 53, 67, 68, 65, 69, 57, 51, 70, 67, 53, 69, 52, 70, 70, 66, 70, 67, 66, 50, 69, 55, 66 },
                            PasswordSalt = new byte[] { 48, 120, 49, 57, 52, 66, 70, 49, 56, 53, 66, 54, 57, 56, 56, 66, 70, 50, 57, 51, 50, 65, 52, 57, 52, 65, 67, 54, 57, 54, 55, 52, 57, 68, 53, 54, 52, 50, 66, 49, 48, 67, 53, 66, 55, 66, 69, 67, 65, 70, 70, 55, 53, 50, 65, 55, 69, 66, 66, 54, 54, 49, 56, 48, 68, 56, 53, 48, 54, 70, 68, 65, 54, 69, 70, 53, 49, 69, 56, 52, 69, 69, 70, 54, 69, 52, 49, 49, 51, 69, 66, 57, 65, 57, 66, 68, 48, 52, 49, 53, 52, 67, 52, 68, 49, 56, 69, 56, 55, 55, 55, 65, 50, 65, 68, 49, 53, 67, 50, 51, 54, 56, 69, 67, 48, 65, 70, 66, 57, 51, 52, 69, 52, 55, 49, 52, 49, 56, 65, 66, 48, 54, 57, 56, 68, 55, 69, 56, 56, 50, 55, 70, 55, 48, 66, 56, 49, 68, 54, 67, 69, 67, 49, 70, 54, 70, 54, 66, 48, 50, 51, 54, 70, 67, 70, 55, 65, 51, 57, 65, 50, 50, 53, 51, 65, 65, 68, 55, 53, 54, 49, 51, 52, 50, 66, 53, 56, 53, 65, 51, 51, 69, 52, 57, 65, 48, 65, 65, 67, 65, 55, 70, 53, 50, 65, 48, 56, 65, 66, 48, 67, 56, 48, 68, 56, 57, 52, 55, 51, 67, 68, 65, 69, 70, 48, 54, 48, 67, 51, 51, 69, 65, 69, 68, 55, 57, 57, 56, 69, 53, 48, 52, 57, 66, 55, 55, 57, 49 },
                            PhoneNumber = "0695561004",
                            WorkerTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "brzi223@yahoo.com",
                            LastName = "Brzi",
                            Name = "Jovan",
                            PasswordHash = new byte[] { 48, 120, 69, 50, 52, 53, 65, 50, 65, 69, 56, 55, 70, 70, 69, 48, 48, 50, 56, 54, 66, 57, 57, 66, 50, 49, 56, 66, 66, 51, 69, 67, 53, 67, 68, 56, 70, 48, 51, 52, 69, 57, 50, 48, 51, 67, 50, 56, 52, 56, 68, 48, 55, 68, 57, 55, 55, 50, 56, 70, 70, 50, 50, 53, 69, 69, 66, 69, 56, 57, 50, 67, 48, 69, 52, 55, 54, 54, 50, 55, 70, 67, 55, 52, 53, 55, 57, 69, 65, 57, 56, 53, 69, 50, 55, 48, 50, 55, 53, 54, 57, 67, 56, 70, 54, 67, 55, 65, 53, 67, 68, 65, 69, 57, 51, 70, 67, 53, 69, 52, 70, 70, 66, 70, 67, 66, 50, 69, 55, 66 },
                            PasswordSalt = new byte[] { 48, 120, 49, 57, 52, 66, 70, 49, 56, 53, 66, 54, 57, 56, 56, 66, 70, 50, 57, 51, 50, 65, 52, 57, 52, 65, 67, 54, 57, 54, 55, 52, 57, 68, 53, 54, 52, 50, 66, 49, 48, 67, 53, 66, 55, 66, 69, 67, 65, 70, 70, 55, 53, 50, 65, 55, 69, 66, 66, 54, 54, 49, 56, 48, 68, 56, 53, 48, 54, 70, 68, 65, 54, 69, 70, 53, 49, 69, 56, 52, 69, 69, 70, 54, 69, 52, 49, 49, 51, 69, 66, 57, 65, 57, 66, 68, 48, 52, 49, 53, 52, 67, 52, 68, 49, 56, 69, 56, 55, 55, 55, 65, 50, 65, 68, 49, 53, 67, 50, 51, 54, 56, 69, 67, 48, 65, 70, 66, 57, 51, 52, 69, 52, 55, 49, 52, 49, 56, 65, 66, 48, 54, 57, 56, 68, 55, 69, 56, 56, 50, 55, 70, 55, 48, 66, 56, 49, 68, 54, 67, 69, 67, 49, 70, 54, 70, 54, 66, 48, 50, 51, 54, 70, 67, 70, 55, 65, 51, 57, 65, 50, 50, 53, 51, 65, 65, 68, 55, 53, 54, 49, 51, 52, 50, 66, 53, 56, 53, 65, 51, 51, 69, 52, 57, 65, 48, 65, 65, 67, 65, 55, 70, 53, 50, 65, 48, 56, 65, 66, 48, 67, 56, 48, 68, 56, 57, 52, 55, 51, 67, 68, 65, 69, 70, 48, 54, 48, 67, 51, 51, 69, 65, 69, 68, 55, 57, 57, 56, 69, 53, 48, 52, 57, 66, 55, 55, 57, 49 },
                            PhoneNumber = "0695561004",
                            WorkerTypeId = 2
                        });
                });

            modelBuilder.Entity("BackendAPI.Models.Database.WorkerCommunication", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("UnreadMessages")
                        .HasColumnType("int");

                    b.Property<int>("User1")
                        .HasColumnType("int");

                    b.Property<int>("User2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "User1", "User2" }, "IX_WorkerCommunication")
                        .IsUnique();

                    b.ToTable("WorkerCommunication", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Database.WorkerMessage", b =>
                {
                    b.Property<int>("CommunicationId")
                        .HasColumnType("int")
                        .HasColumnName("CommunicationID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CommunicationId");

                    b.ToTable("WorkerMessages");
                });

            modelBuilder.Entity("BackendAPI.Models.Database.WorkerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("WorkerType1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("WorkerType");

                    b.HasKey("Id");

                    b.ToTable("WorkerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WorkerType1 = "Menadzer"
                        },
                        new
                        {
                            Id = 2,
                            WorkerType1 = "Frizer"
                        });
                });

            modelBuilder.Entity("BackendAPI.Models.Database.Worker", b =>
                {
                    b.HasOne("BackendAPI.Models.Database.WorkerType", "WorkerType")
                        .WithMany("Workers")
                        .HasForeignKey("WorkerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Workers_WorkerTypes");

                    b.Navigation("WorkerType");
                });

            modelBuilder.Entity("BackendAPI.Models.Database.WorkerCommunication", b =>
                {
                    b.HasOne("BackendAPI.Models.Database.Worker", "User1Navigation")
                        .WithMany("WorkerCommunications")
                        .HasForeignKey("User1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WorkerCommunication_Workers");

                    b.Navigation("User1Navigation");
                });

            modelBuilder.Entity("BackendAPI.Models.Database.WorkerMessage", b =>
                {
                    b.HasOne("BackendAPI.Models.Database.WorkerCommunication", "Communication")
                        .WithMany()
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WorkerMessages_WorkerCommunication");

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("BackendAPI.Models.Database.Worker", b =>
                {
                    b.Navigation("WorkerCommunications");
                });

            modelBuilder.Entity("BackendAPI.Models.Database.WorkerType", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
